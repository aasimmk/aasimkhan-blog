[
{
    "model": "blog.blogcategory",
    "pk": 1,
    "fields": {
        "name": "IoT",
        "slug": "internet-of-things"
    }
},
{
    "model": "blog.blogpost",
    "pk": 1,
    "fields": {
        "title": "IoT Notification Using AWS (Part 1)",
        "slug": "iot-notification-using-aws-part-1",
        "category": 1,
        "date_created": "2019-02-01",
        "date_modified": "2019-05-23T06:09:05.400Z",
        "image": "",
        "thumbnail": "",
        "meta_keyword": "aws iot, iot notification, aws iot core, iot, lambda, node mcu, esp 8266",
        "meta_description": "Setting up nodemcu for AWS IoT",
        "content": "<h2>Introduction</h2>\r\n\r\n<p>Internet of things is a hot-buzz-word in the field of AI these days. However, the concept has been developed&nbsp;about 20 years ago by&nbsp;<a href=\"https://twitter.com/kevin_ashton\">@kevin_ashton</a>.&nbsp;Let&#39;s have a&nbsp;simple definition to get it introduced.</p>\r\n\r\n<blockquote>\r\n<p>The network of small devices connected with sensors,&nbsp;which can communicate over internet and are capable of sending/recieving data and trigger some action based on certain condition.</p>\r\n</blockquote>\r\n\r\n<p>There is lot more in introduction itself like application areas, communication architecture, security and much more. I would suggest to go through the IoT&#39;s <a href=\"http://en.wikipedia.org/wiki/Internet_of_things\">wiki</a>.</p>\r\n\r\n<p>I am going to show how to configure nodemcu with AWS with security certificates.&nbsp;I have selected nodemcu as IoT device and DHT11 temperature sensor, both are easily available online. <strong>The basic idea is to get notification using AWS serveless stack&nbsp;when the temperature hits too high.</strong>&nbsp;Now let&#39;s configure the device and feed some code to it.</p>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h2>Setting Up The Device</h2>\r\n\r\n<p>To get started you need to install</p>\r\n\r\n<ol>\r\n\t<li>Ardruino IDE (<a href=\"https://www.arduino.cc/en/Main/Software\" target=\"_blank\">download</a>)</li>\r\n\t<li>NodeMCU Driver (download <a href=\"https://sparks.gogo.co.nz/ch340.html\" target=\"_blank\">CH340&nbsp;</a>or <a href=\"https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers\" target=\"_blank\">CP210x</a>) check the name on nodemcu.&nbsp;</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #1</strong></p>\r\n\r\n<p>Open arduino IDE preferences and update &quot;Additional Boards Manager URLs&quot; value with</p>\r\n\r\n<pre>\r\n<code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code></pre>\r\n\r\n<p><span style=\"font-family:Courier New,Courier,monospace\"><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/01/31/arduino-settings.jpg\" /></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #2</strong></p>\r\n\r\n<p>Open <span style=\"font-family:Courier New,Courier,monospace\">Tools -&gt; Boards -&gt; Board Manager</span>. Search for &quot;esp8266&quot; and install it.</p>\r\n\r\n<p>Now select <span style=\"font-family:Courier New,Courier,monospace\">Tools -&gt; Boards -&gt;&nbsp;NodeMCU 1.0(ESP-12E Module)</span> and connect your device to USB port. Check if your device is working fine or you are connected to correct port by clicking on&nbsp;<span style=\"font-family:Courier New,Courier,monospace\">Tools&nbsp;-&gt; Board Info</span>. You will get a pop up window(see image below).</p>\r\n\r\n<p><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/02/02/board-info.jpg\" style=\"height:159px; width:298px\" /></p>\r\n\r\n<p>If it throws error, try changing port listed under <span style=\"font-family:Courier New,Courier,monospace\">Tool -&gt; Port</span>. If you are still getting error then probably&nbsp;the driver is not installed properly.</p>\r\n\r\n<blockquote>\r\n<p>I have found the driver issue with Mac High Sierra. However, the drivers are working fine on Windows and Linux platform. Let me in the comments if you are also&nbsp;facing the same issue and if there is any fix for this issue.&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #3</strong></p>\r\n\r\n<p>Search and install required libraries under <span style=\"font-family:Courier New,Courier,monospace\">Sketch -&gt; Include Library -&gt; Manage Libraries</span></p>\r\n\r\n<ol>\r\n\t<li>DHT sensor library (by Adafruit)</li>\r\n\t<li>PubSubClient (by Nick O&#39;Leary)</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #4</strong></p>\r\n\r\n<p>Now go to AWS IoT Core and create a policy. You will need this while creating the certificates. Replace aws account id, you can find it in your aws account settings.</p>\r\n\r\n<pre>\r\n<code class=\"language-json\">{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": \"iot:*\",\r\n      \"Resource\": \"arn:aws:iot:us-east-1:AWS_ACCOUNT_ID:*\"\r\n    }\r\n  ]\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #5</strong></p>\r\n\r\n<p>Create certificates and&nbsp;download them from&nbsp;<span style=\"font-family:Courier New,Courier,monospace\">Security -&gt; Certificates</span>&nbsp;using &quot;One-click certificate creation&quot;. Activate the certificate and attach the policy that you have created in the previous step.</p>\r\n\r\n<p><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/02/02/aws-certificate-creation.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>To check the certs are in action. When you perform step #8&nbsp;successfully, just deactivate the certificate and try reconnecting again. You will not be able to the connect the until the certificate is&nbsp;activate.&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #6</strong></p>\r\n\r\n<p>Coding Time! Replace the placeholders with your&nbsp;values. Use notepad to open the downloaded certificatates.</p>\r\n\r\n<pre>\r\n<code class=\"language-cpp\">#include &lt;DHT.h&gt;\r\n#include &lt;ESP8266WiFi.h&gt;\r\n#include &lt;PubSubClient.h&gt;\r\nextern \"C\" {\r\n#include \"libb64/cdecode.h\"\r\n}\r\n\r\n#define DHTPIN 4\r\n#define DHTTYPE DHT11\r\n\r\nDHT dht(DHTPIN,DHTTYPE);\r\n\r\nstruct dht11\r\n{\r\n  float humidity;\r\n  float heatIndex;\r\n  float temp;\r\n};\r\n\r\nint led_counter = 0;\r\nint led_state = LOW;\r\nstruct dht11 sensor_data;\r\nint read_sensor(struct dht11* data);\r\nchar sensorData;\r\n\r\n// Update these with values suitable for your network.\r\nconst char* ssid = \"&lt;WIFI_SSID&gt;\";\r\nconst char* password = \"&lt;WIFI_PASSOWRD&gt;\";\r\nconst char* awsEndpoint = \"&lt;AWS_IOT_ENDPOINT&gt;\";\r\nconst char* DEVICE_ID = \"Node/1\";\r\nconst char* PUBLISH_TOPIC = DEVICE_ID;\r\nconst char* SUBSCRIBE_TOPIC = \"&lt;TOPIC_TO_SUBSCRIBE&gt;\";\r\n\r\n// For the two certificate strings below paste in the text of your \r\n// device certificate and private key, comment out the BEGIN and \r\n// lines, add a quote character at the start of each line and a \r\n// and backslash at the end of each line:\r\n\r\nconst String certificatePemCrt = '&lt;AWS_CERTIFICATE_PEM&gt;'\r\nconst String privatePemKey = '&lt;AWS_PRIVATE_PEM&gt;'\r\n\r\n\r\nint timeSinceLastRead = 0;\r\nWiFiClientSecure wiFiClient;\r\nvoid callback(char* topic, byte* payload, unsigned int len);\r\nPubSubClient client(awsEndpoint, 8883, callback, wiFiClient);\r\nlong lastMsg = 0;\r\nchar msg[200];\r\nint value = 0;\r\nint analog_pin = A0;\r\n\r\nvoid setup() {\r\n  // Initialize the BUILTIN_LED pin as an output\r\n  pinMode(BUILTIN_LED, OUTPUT);\r\n  pinMode(analog_pin, INPUT);\r\n  Serial.begin(115200);\r\n  setup_wifi();\r\n}\r\n\r\nvoid setup_wifi() {\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  Serial.print(\"MAC: \");\r\n  Serial.println(WiFi.macAddress());\r\n  uint8_t binaryCert[certificatePemCrt.length() * 3 / 4];\r\n  int len = b64decode(certificatePemCrt, binaryCert);\r\n  wiFiClient.setCertificate(binaryCert, len);\r\n  uint8_t binaryPrivate[privatePemKey.length() * 3 / 4];\r\n  len = b64decode(privatePemKey, binaryPrivate);\r\n  wiFiClient.setPrivateKey(binaryPrivate, len);\r\n}\r\n\r\nvoid callback(char* topic, byte* payload, unsigned int length) {\r\n  Serial.print(\"Message arrived [\");\r\n  Serial.print(topic);\r\n  Serial.print(\"] \");\r\n  for (int i = 0; i &lt; length; i++) {\r\n    Serial.print((char)payload[i]);\r\n  }\r\n}\r\n\r\nvoid reconnect() {\r\n  // Loop until we're reconnected\r\n  while (!client.connected()) {\r\n    Serial.print(\"Attempting MQTT connection...\");\r\n    // Attempt to connect\r\n    if (client.connect(DEVICE_ID)) {\r\n      Serial.println(\"connected\");\r\n      client.subscribe(SUBSCRIBE_TOPIC);\r\n    } else {\r\n      Serial.print(\"failed, rc=\");\r\n      Serial.print(client.state());\r\n      Serial.println(\" try again in 5 seconds\");\r\n      // Wait 5 seconds before retrying\r\n      delay(5000);\r\n    }\r\n  }\r\n}\r\n\r\nvoid loop() {\r\n  if (!client.connected()) {\r\n    reconnect();\r\n  }\r\n  client.loop();\r\n  long now = millis();\r\n  if (now - lastMsg &gt; 60000) {\r\n    lastMsg = now;\r\n    if(read_sensor(&amp;sensor_data)==0)\r\n    {\r\n      char str_temp[6],str_humidity[6],str_hi[6];\r\n      dtostrf(sensor_data.temp, 4, 2, str_temp);\r\n      dtostrf(sensor_data.humidity, 4, 2, str_humidity);\r\n      dtostrf(sensor_data.heatIndex, 4, 2, str_hi);\r\n      snprintf(msg,100,\"{\\\"device_id\\\":\\\"%s\\\",\\\"temperature\\\":\\\"%s\\\",\\\"humidity\\\":\\\"%s\\\",\\\"heat_index\\\":\\\"%s\\\"}\",DEVICE_ID,str_temp,str_humidity,str_hi);\r\n      Serial.print(\"Publish message: \");\r\n      Serial.println(msg);\r\n      client.publish(PUBLISH_TOPIC, msg);\r\n    }\r\n  }\r\n  else if (now - lastMsg &gt; 1000) {\r\n    if(led_counter) {\r\n      led_state = (led_state)?LOW:HIGH;\r\n      digitalWrite(BUILTIN_LED, led_state);\r\n    }\r\n  }\r\n}\r\nint read_sensor(struct dht11* data) {\r\n  data-&gt;humidity = dht.readHumidity();\r\n  data-&gt;temp = dht.readTemperature();\r\n  if(isnan(data-&gt;humidity)||isnan(data-&gt;temp)) {\r\n    Serial.println(\"DHT11 Read Failed\");\r\n    return 1;\r\n  }\r\n  data-&gt;heatIndex = dht.computeHeatIndex(data-&gt;temp,data-&gt;humidity,false);\r\n  return 0;\r\n}\r\n\r\nint b64decode(String b64Text, uint8_t* output) {\r\n  base64_decodestate s;\r\n  base64_init_decodestate(&amp;s);\r\n  int cnt = base64_decode_block(b64Text.c_str(), b64Text.length(), (char*)output, &amp;s);\r\n  return cnt;\r\n}</code></pre>\r\n\r\n<p>Take a close look at the code and verify values that you have updated. Now compile and upload the code to your device.</p>\r\n\r\n<p>The source is also available on Github <a href=\"https://github.com/AasimMK/aws-iot-notifications\" target=\"_blank\">here</a>.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #7</strong></p>\r\n\r\n<p>Disconnect the device&nbsp;and connect the sensor to the following pins on the Nodemcu.</p>\r\n\r\n<ul>\r\n\t<li>Connect <strong>+</strong>&nbsp;to 3v3 (Voltage Pin)</li>\r\n\t<li>Connect <strong>-</strong>&nbsp;to&nbsp;GND (Ground Pin)</li>\r\n\t<li>Connect <strong>out</strong>&nbsp;to D2 (Data Pin)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #8</strong></p>\r\n\r\n<p>Check the connections.</p>\r\n\r\n<p>Reconnect your device via USB and open <span style=\"font-family:Courier New,Courier,monospace\">Tools -&gt; Serial Monitor</span>. You will see the&nbsp;output of the iot device here. Now, go to AWS IoT and on the main dashboard, click on &quot;Test&quot; in sidebar menu. Enter device id and subscribe to it. At this point, you should start getting data on the AWS IoT.</p>\r\n\r\n<blockquote>\r\n<p>If you encounter&nbsp;any&nbsp;error here, check the &quot;Serial Monitor&quot;. There might be connection issue with network or your temperature sensor may not sending data to the IoT device.</p>\r\n</blockquote>\r\n\r\n<p>So far,&nbsp;you are able to connect the IoT device to AWS cloud. Now we are good to go to part 2, which is focused on the backend that manages data from IoT device and notifications.</p>\r\n\r\n<p style=\"text-align:right\">&gt;&gt;&nbsp;<a href=\"http://aasimkhan.in/internet-of-things/iot-notification-using-aws-part-2/\">Continue to part 2</a></p>",
        "is_published": true
    }
},
{
    "model": "blog.blogpost",
    "pk": 2,
    "fields": {
        "title": "IoT Notification Using AWS (Part 2)",
        "slug": "iot-notification-using-aws-part-2",
        "category": 1,
        "date_created": "2019-02-06",
        "date_modified": "2019-02-06T21:29:32.944Z",
        "image": "",
        "thumbnail": "",
        "meta_keyword": "aws iot, iot notification, aws iot core, iot, lambda, sns, temperature sensor",
        "meta_description": "How to setup aws for IoT device for savings temperature data to DynamoDB database nd get email notification from iot device.",
        "content": "<p>In previous part, the IoT device is configured and ready to talk with AWS IoT core. Now we will configure the AWS and put everything together.</p>\r\n\r\n<p>We have configured the device to send the data to AWS IoT every minute and then we trigger a queue which process the request asynchronously.</p>\r\n\r\n<p>Now there could be other methods to do the same. Like we can trigger the lambda as soon as the data arrives on AWS IoT core. That&#39;s also fine. But think like this, you have thousands of devices hitting the same endpoint and you want to send out notifications to multiple destinations on certain conditions. In this case, the AWS SQS service comes in. AWS SQS is designed to process the requests asynchronously. So handling the request in distributed environment&nbsp;with AWS SQS seems a good fit for this scenario. Let&#39;s start configuring&nbsp;AWS&nbsp;serverless stack for email&nbsp;notifications.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #1</strong></p>\r\n\r\n<p>Register and verify the email address of sender and recipients in <span style=\"font-family:Courier New,Courier,monospace\">AWS SES -&gt;&nbsp;Email Addresses</span>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #2</strong></p>\r\n\r\n<p>Open AWS Lambda service and create lambda, use python3.6 as container.&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>Make sure to include AmazonSESFullAccess policy to the role attached to your lambda.&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>Replace the placeholder value and use the below script</p>\r\n\r\n<pre>\r\n<code class=\"language-python\">import boto3\r\nimport json\r\nfrom datetime import datetime\r\n\r\n\r\ndef lambda_handler(event, context):\r\n    client = boto3.client('ses')\r\n    if 'Records' in event:\r\n        for record in event['Records']:\r\n            iot_data = json.loads(record['body'])\r\n            timestamp = iot_data['ts']\r\n            readable_time = datetime.fromtimestamp(int(timestamp/1000)).strftime('%Y-%m-%d %H:%M:%S')\r\n            message_body = 'Temperature seems high. Latest recorded temperature is &lt;strong&gt;{0}&lt;/strong&gt; on &lt;strong&gt;{1}&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;Heat Index: {2}&lt;br&gt;Humidity: {3}&lt;br&gt;&lt;br&gt;Notification sent from &lt;strong&gt;{4}&lt;/strong&gt;.'.format(\r\n                iot_data['temperature'], readable_time, iot_data['heat_index'], iot_data['humidity'], iot_data['device_id'])\r\n            client.send_email(\r\n                Source='&lt;SENDER EMAIL&gt;',\r\n                Destination={\r\n                    'ToAddresses': ['RECIEVER EMAIL'],\r\n                },\r\n                Message={\r\n                    'Subject': {'Data': 'Temperature Alert! - {0}'.format(readable_time)},\r\n                    'Body': {\r\n                        'Html': {'Data': message_body}\r\n                    }\r\n                },\r\n            )\r\n</code></pre>\r\n\r\n<p>The source is also available on Github <a href=\"https://github.com/AasimMK/aws-iot-notifications\" target=\"_blank\">here</a>.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #3</strong></p>\r\n\r\n<p>Go to AWS SQS and create a standard queue.&nbsp;Perform below actions.</p>\r\n\r\n<p><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/02/06/sqs-trigger.jpg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Add permission</p>\r\n\r\n<p><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/02/06/sqs-permission.jpg\" /></p>\r\n\r\n<p>and then attach the lambda function.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step #4</strong></p>\r\n\r\n<p>We will create a rule&nbsp;in AWS IoT for sending request to AWS SQS when temperature goes to 25&deg; Celsius and also add timestamp to data arriving to the AWS IoT.</p>\r\n\r\n<p>Use the below query and add action <span style=\"font-family:Courier New,Courier,monospace\">&quot;Send a message to an SQS queue&quot;.</span></p>\r\n\r\n<pre>\r\n<code>SELECT timestamp() as ts, * FROM 'Node/#' WHERE temperature &gt;= 25</code></pre>\r\n\r\n<blockquote>\r\n<p>Note that I am using wildcard based Topic name &#39;Node/#&#39;&nbsp; in above query, which is also our device name. So, our rule is valid for all those which has device id as Node/1, Node/2 and Node/3 and so on.</p>\r\n</blockquote>\r\n\r\n<p><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/02/06/sqs-rule.jpg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Finger crossed. Let&#39;s check the network,&nbsp;connection to sensor and connect the device. Give some heat to the sensor and you shall&nbsp;recieve the email notification.</p>\r\n\r\n<p>Here is the screenshot of the actual email I have recieved.</p>\r\n\r\n<p><img alt=\"\" class=\"img-responsive\" src=\"/media/uploads/2019/02/06/screenshot_YJmJNi3.jpg\" /></p>",
        "is_published": true
    }
},
{
    "model": "blog.blogpost",
    "pk": 3,
    "fields": {
        "title": "Storing IoT Data with AWS DynamoDB",
        "slug": "storing-iot-data-with-aws-dynamodb",
        "category": 1,
        "date_created": "2019-02-27",
        "date_modified": "2019-02-27T06:33:26.899Z",
        "image": "",
        "thumbnail": "",
        "meta_keyword": "aws iot, aws dynamodb, aws iot core, iot, temperature sensor",
        "meta_description": "Setting up AWS DynamoDB and save IoT data from iot device",
        "content": "<p>Test</p>",
        "is_published": false
    }
}
]
